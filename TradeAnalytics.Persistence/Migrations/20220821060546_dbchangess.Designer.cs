// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradeAnalytics.Persistence;

namespace TradeAnalytics.Persistence.Migrations
{
    [DbContext(typeof(TradeAnalyticsDbContext))]
    [Migration("20220821060546_dbchangess")]
    partial class dbchangess
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.Portfolio", b =>
                {
                    b.Property<int>("PortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PortfolioId");

                    b.ToTable("Portfolios");

                    b.HasData(
                        new
                        {
                            PortfolioId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "portfolioMastan is a mastan's portfolio.",
                            IsActive = true,
                            Name = "portfolioMastan"
                        });
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeFee.Brokerage", b =>
                {
                    b.Property<int>("BrokerageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BrokerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BrokerageAmt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ExchangeType")
                        .HasColumnType("int");

                    b.Property<decimal>("MinimumBrokerageAmt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinimumBrokeragePct")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SecurityType")
                        .HasColumnType("int");

                    b.Property<int>("TradeSecurityFeeId")
                        .HasColumnType("int");

                    b.HasKey("BrokerageId");

                    b.HasIndex("TradeSecurityFeeId")
                        .IsUnique();

                    b.ToTable("Brokerage");
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeFee.StampDuty", b =>
                {
                    b.Property<int>("StampDutyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("StampDutyPct")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TradeSecurityFeeId")
                        .HasColumnType("int");

                    b.HasKey("StampDutyId");

                    b.HasIndex("TradeSecurityFeeId")
                        .IsUnique();

                    b.ToTable("StampDuty");
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeFee.TradeSecurityFee", b =>
                {
                    b.Property<int>("TradeSecurityFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DPCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SecurityExchangeCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SecurityTransCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TradeSecurityId")
                        .HasColumnType("int");

                    b.Property<decimal>("TurnOverFee")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TradeSecurityFeeId");

                    b.HasIndex("TradeSecurityId");

                    b.ToTable("TradeSecurityFees");
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeFee.TradeSecurityTransaction", b =>
                {
                    b.Property<int>("TradeSecurityTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProfitAndLoss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TradeQuantity")
                        .HasColumnType("int");

                    b.Property<int>("TradeSecurityFeeId")
                        .HasColumnType("int");

                    b.Property<int>("TradeType")
                        .HasColumnType("int");

                    b.Property<decimal>("TurnOver")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TradeSecurityTransactionId");

                    b.HasIndex("TradeSecurityFeeId")
                        .IsUnique();

                    b.ToTable("TradeSecurityTransaction");
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeSecurity", b =>
                {
                    b.Property<int>("TradeSecurityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TradeSecurityId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("TradeSecurities");

                    b.HasData(
                        new
                        {
                            TradeSecurityId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Wipro Limited is an Indian multinational corporation that provides information technology, consulting and business process services.",
                            Name = "Wipro",
                            PortfolioId = 1,
                            SecurityCode = "Wipro"
                        });
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeSecurityFundamentals", b =>
                {
                    b.Property<int>("TradeSecurityFundamentalsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("BookValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DebtToEquity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DividendYield")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EarningPerShare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FaceValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<decimal>("MarketCap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceToBook")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceToEarning")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceToEarning_Industry")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReturnOnEquityPerc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TradeSecurityId")
                        .HasColumnType("int");

                    b.HasKey("TradeSecurityFundamentalsId");

                    b.HasIndex("TradeSecurityId");

                    b.ToTable("TradeSecurityFundamentals");

                    b.HasData(
                        new
                        {
                            TradeSecurityFundamentalsId = 1,
                            BookValue = 120.38m,
                            DebtToEquity = 0.27m,
                            DividendYield = 1.42m,
                            EarningPerShare = 22.29m,
                            FaceValue = 2m,
                            IsCurrent = false,
                            MarketCap = 230618m,
                            PriceToBook = 3.51m,
                            PriceToEarning = 18.93m,
                            PriceToEarning_Industry = 28.31m,
                            ReturnOnEquityPerc = 20.18m,
                            TradeSecurityId = 1
                        });
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeSecurityPerformance", b =>
                {
                    b.Property<int>("TradeSecurityPerformanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<decimal>("OpenPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrevClosed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TradeSecurityId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Week_52_High")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Week_52_Low")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TradeSecurityPerformanceId");

                    b.HasIndex("TradeSecurityId");

                    b.ToTable("TradeSecurityPerformance");

                    b.HasData(
                        new
                        {
                            TradeSecurityPerformanceId = 1,
                            Date = new DateTime(2022, 8, 21, 11, 35, 44, 672, DateTimeKind.Local).AddTicks(8506),
                            IsCurrent = false,
                            OpenPrice = 420.05m,
                            PrevClosed = 422.00m,
                            TradeSecurityId = 1,
                            Value = 1340000000m,
                            Volume = 3186358m,
                            Week_52_High = 739.85m,
                            Week_52_Low = 421.75m
                        });
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeFee.Brokerage", b =>
                {
                    b.HasOne("TradeAnalytics.Domain.Entities.TradeFee.TradeSecurityFee", null)
                        .WithOne("Brokerage")
                        .HasForeignKey("TradeAnalytics.Domain.Entities.TradeFee.Brokerage", "TradeSecurityFeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeFee.StampDuty", b =>
                {
                    b.HasOne("TradeAnalytics.Domain.Entities.TradeFee.TradeSecurityFee", null)
                        .WithOne("StampDuty")
                        .HasForeignKey("TradeAnalytics.Domain.Entities.TradeFee.StampDuty", "TradeSecurityFeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeFee.TradeSecurityFee", b =>
                {
                    b.HasOne("TradeAnalytics.Domain.Entities.TradeSecurity", null)
                        .WithMany("TradeSecurityFees")
                        .HasForeignKey("TradeSecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeFee.TradeSecurityTransaction", b =>
                {
                    b.HasOne("TradeAnalytics.Domain.Entities.TradeFee.TradeSecurityFee", null)
                        .WithOne("TradeSecurityTransaction")
                        .HasForeignKey("TradeAnalytics.Domain.Entities.TradeFee.TradeSecurityTransaction", "TradeSecurityFeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeSecurity", b =>
                {
                    b.HasOne("TradeAnalytics.Domain.Entities.Portfolio", null)
                        .WithMany("TradeSecurities")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeSecurityFundamentals", b =>
                {
                    b.HasOne("TradeAnalytics.Domain.Entities.TradeSecurity", null)
                        .WithMany("TradeSecurityFundamentals")
                        .HasForeignKey("TradeSecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeSecurityPerformance", b =>
                {
                    b.HasOne("TradeAnalytics.Domain.Entities.TradeSecurity", null)
                        .WithMany("TradeSecurityPerformance")
                        .HasForeignKey("TradeSecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.Portfolio", b =>
                {
                    b.Navigation("TradeSecurities");
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeFee.TradeSecurityFee", b =>
                {
                    b.Navigation("Brokerage");

                    b.Navigation("StampDuty");

                    b.Navigation("TradeSecurityTransaction");
                });

            modelBuilder.Entity("TradeAnalytics.Domain.Entities.TradeSecurity", b =>
                {
                    b.Navigation("TradeSecurityFees");

                    b.Navigation("TradeSecurityFundamentals");

                    b.Navigation("TradeSecurityPerformance");
                });
#pragma warning restore 612, 618
        }
    }
}
